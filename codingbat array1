//firstLast6:

public boolean firstLast6(int[] nums) {
    return nums[0] == 6 || nums[nums.length - 1] == 6;
}

//sameFirstLast:

public boolean sameFirstLast(int[] nums) {
    return nums.length >= 1 && nums[0] == nums[nums.length - 1];
}

//makePi:

public int[] makePi() {
    int[] pie = { 3, 1, 4 };
    return pie;
}

//commonEnd:

public boolean commonEnd(int[] a, int[] b) {
    return a[0] == b[0] || a[a.length - 1] == b[b.length - 1];
}

//sum3:

public int sum3(int[] nums) {
    return nums[0] + nums[1] + nums[2];
}

//rotateLeft3:

public int[] rotateLeft3(int[] nums) {
    int[] rLeft = { nums[1], nums[2], nums[0] };
    return rLeft;
}

//reverse3:

public int[] reverse3(int[] nums) {
    int[] newOrder = { nums[2], nums[1], nums[0] };
    return newOrder;
}

//maxEnd3:

public int[] maxEnd3(int[] nums) {
    if (nums[2] > nums[0]) {
        nums[0] = nums[2];
        nums[1] = nums[2];
    } else {
        nums[1] = nums[0];
        nums[2] = nums[0];
    }
    return nums;
}

//sum2:

public int sum2(int[] nums) {
    if (nums.length == 0)
        return 0;
    if (nums.length == 1)
        return nums[0];
    return nums[0] + nums[1];
}

//middleWay:

public int[] middleWay(int[] a, int[] b) {
    int[] c = { a[1], b[1] };
    return c;
}
